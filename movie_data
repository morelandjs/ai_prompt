#!/usr/bin/env python3

import ast
from collections import Counter
import csv
import re

import matplotlib.pyplot as plt
import numpy as np
from stop_words import get_stop_words


aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textiny, texsmall, texnormal = 8.0, 9.25, 10.0
offblack = '#262626'

plt.rcdefaults()
plt.rcParams.update({
    'font.size': texsmall,
    'legend.fontsize': texsmall,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .9,
    'lines.markersize': 3,
    'lines.markeredgewidth': .1,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'xtick.major.width': .5,
    'ytick.major.width': .5,
    'xtick.minor.width': .5,
    'ytick.minor.width': .5,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.minor.size': 1.3,
    'ytick.minor.size': 1.3,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'text.color': 'black',
    'axes.edgecolor': 'black',
    'axes.labelcolor': 'black',
    'xtick.color': 'black',
    'ytick.color': 'black',
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.interpolation': 'none',
    'pdf.fonttype': 42,
})


def finish(despine=True, remove_ticks=False, pad=0.1, h_pad=None, w_pad=None,
           rect=[0, 0, 1, 1]):
    fig = plt.gcf()

    for ax in fig.axes:
        if despine:
            for spine in 'top', 'right':
                ax.spines[spine].set_visible(False)

        if remove_ticks:
            for ax_name in 'xaxis', 'yaxis':
                getattr(ax, ax_name).set_ticks_position('none')
        else:
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)


def word_list(text, stopwords=False, blacklist=set(), replace=dict()):
    """
    Takes a string and returns a list of words.
    Only characters a-z are kept as well as apostrophes.
    All words are returned lower case.

    stopwords option toggles stop words, e.g. 'a', 'and', etc

    """

    # remove gramma, punctuation and capitalization
    text = re.sub("[^\w \']", " ", text.lower())

    # replace words in replacements
    for old, new in replace.items():
        text = text.replace(old, new)

    # remove stop words and blacklisted words
    stop_words = set(get_stop_words('english'))
    ignore = blacklist if stopwords else stop_words.union(blacklist)

    word_list = [w for w in text.split() if w not in ignore]

    return word_list


def main():
    # load the csv file containing movie data
    try:
        with open('movie_data.csv', 'r') as f:
            reader = list(csv.DictReader(f))
    except FileNotFoundError:
        print("Expects 'movie_data.csv' in working directory, see README")
        return

    # notify user of runtime delay
    print("Parsing data, this could take a min...\n")

    genre_text = ''.join([row['genres'] for row in reader])

    """
    Five most common genres

    Note: I make several ad hoc tweaks to the word list in order to
    generate sensible results. Proper generalization requires something
    along the lines of word stemming which is not implemented in
    this script.

    """

    # black list several empty filler words
    blacklist = ["film", "movie", "movies", "cinema", "will",
            "also", "get"]

    # replace romance with romantic
    replace = {"romantic" : "romance"}

    genre_counts = Counter(
            word_list(genre_text, blacklist=blacklist, replace=replace)
            )

    print('Popular genres (name, counts):\n{}\n'.format(
        genre_counts.most_common(5)))

    """
    Loop through top five most popular genres
    and list common words.

    """
    for genre, _ in genre_counts.most_common(5):
        # join matching summaries into single string
        genre_text = ''.join([
            row['summary'] for row in reader
            if genre in word_list(row['genres'], replace=replace)
            ])

        # count most common words in joined summary string
        genre_words = Counter(word_list(genre_text, blacklist=blacklist))

        print('{} words (name, counts):\n{}\n'.format(
            genre, genre_words.most_common(12)))

    """
    Testing Zipf's law: word frequency is inversely
    proportional to its rank in the frequency table.
    http://en.wikipedia.org/wiki/Zipf's_law

    Pruning is turned 'off' as stop words are included
    in Zipf's law.

    """

    # print status output
    print("Plotting Zipf's law.")

    # set figure width to document column width
    plt.figure(figsize=(columnwidth, aspect*columnwidth))

    summary_text = ''.join([
        row['summary'] for row in reader
        ])

    # count most common summary words in all summary text
    summary_words = Counter(word_list(summary_text, stopwords=True))

    # generate list of tuples for word rank and frequency (counts)
    word_freq = list(enumerate(
        sorted(summary_words.values(), reverse=True), start=1
        ))

    """
    First scatter plot word rank and frequency data for
    Zipf's law. Then fit the data on a log-log scale to a line
    and compare fit quality.

    """
    nw = 10**5
    rank, freq = zip(*word_freq[:nw])

    log_rank = np.log(rank)
    log_freq = np.log(freq)

    # thin scatter plot data set to improve pdf rendering
    log_rank_sparse = np.concatenate((log_rank[:100], log_rank[100::10]))
    log_freq_sparse = np.concatenate((log_freq[:100], log_freq[100::10]))

    # plot movie data summary words, rank and frequency
    plt.scatter(log_rank_sparse, log_freq_sparse, label='Movie summary words')

    # rebin to account for nonuniform density in log space
    # fit domain is log(rank) in [2, 8]
    bins = np.linspace(2, 8, 20)
    x = 0.5*(bins[:-1] + bins[1:])
    y = [log_freq[(log_rank > lo) & (log_rank < hi)].mean()
         for lo, hi in zip(bins[:-1], bins[1:])]

    # fit log(rank) and log(freq) with a line
    coeff = np.polyfit(x, y, 1)
    linear_fit = np.poly1d(coeff)
    domain = np.linspace(0, 12)

    # plot linear fit
    plt.plot(domain, linear_fit(domain), color='k',
             label=r'linear fit')

    plt.title("Zipf's Law")
    plt.xlabel(r'log(rank)')
    plt.ylabel(r'log(counts)')
    plt.legend()
    finish()

    plt.savefig('fig/zipfs_law.pdf')


if __name__ == "__main__":
    main()
